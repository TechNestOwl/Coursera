        Undeerstanding Flexbox

Much like the div and box container that you can create using HTML, flexbox is a type of container. 
Flexbox can overcome the limitations caused by containers such as block and inline because it does 
a better job of scaling over larger web pages and also provides more dynamic control of the containers. 
This is because it can grow, shrink and align the items inside it which give better control to the programmer
 over the contents and styling of the items inside the container. 

Flexbox is single-dimensional, which means you can align it either along a row or a column and it is set to row 
alignment by default. There are two axes, the main and cross-axis, much like the x and y-axis used in coordinate 
geometry. When aligned along the row, the horizontal axis is called the main axis and the vertical axis is called 
the cross axis. For the items present inside the flexbox container, the placement starts from the top-left corner
 moving along the main or horizontal axis. When the row is filled, the items continue to the next row. Note that 
 with the help of a property called flex-direction, you can instead flip the main axis to run vertically and the
  cross axis will then be horizontal. In such a case, the items will start from top left and move down along the 
  vertical main axis. The properties you choose will help better control alignment, spacing, direction and eventually
   styling of the container and items present inside it. 




        Alignment Properties

justify-content. For item alignment on main axis.

align-items. For item alignment on cross axis.

align-self. For unique flex items on cross axis.

align-content. Used for packing flex lines and control over space.


    ** flex-direction: 
This property is used to set the main axis, which is a ‘row’ by default.
 It basically means you are changing your ‘main’ axis from horizontal rows to vertical columns. 



        Other CSS selectors

- Attribute selectors
        target specific attributs in the dom. 
        ex1: a[href="https://google.com]   -> will target all a tags with this this specific attribute
        ex2: a["href$=.org"]    -> all elements with href ending in '.org'

- :nth-of-type()|| :nyth-of-child() selectors
        matches elements based on position among siblings and type(tag name)


- Star selectoreet 
        * selects 'all' elements

- Group selectors / slector stacking
        precisely as described... groups selectors together




        Specificity Hierarchy

CSS has a set of rules that it uses to 'score' or assign a certain weight to selectors ad this creates a Specificity
hiearchy. based on the wights, there are four categories in this Hierarchy. 

- inline styles: 
        highest Specificity, inlye styles <style></styles> will be applied irrespective of other rules.

- IDs
        next in the hiearchy, id's are represented by # 

- Classes, attributes, and psedo-Classes
        next in the hiearchy. 
        ex:     .my-class 
                p['attribute']
                div:hover

- elemenmts and pseudo-elements
        lowest position in Hierarchy. 



        Pseudo-classes 

State based selectors. Meaning they allow you to select elements based on their state. Ex: hoverState.

Syntax: 
        selector::pseudo-class{
                property: value;
        }

        .myButton::active {
                background-color: green;
                transform: scale(1.2);
        }

User Action States: 
        :hover
        :active
        :focus
These pseudo classes have an effect while the user is actively engaging with an element. 

Form States:
        : diabled and : enabled
        : checked and : indeterminate
        : valid and : invalid

Specific position-based states:
        : first-of-type
        : last-of-type
        : nth-of-type
        : nth-last-of-type

Note: when using multiple pseudo classes, the order in which you apply pseudo classes determins the applied style. Follow the order of 'LVHA'
LVHA:
        -link
        -visited
        -hover
        -active



Text Effects:

The effects developers use on text items on a web page are chosen
mainly because of their styling and layout style. Interesting effects
 can be created by combining these with other CSS properties. 

The visual representation of text content can be changed by four main 
properties: text-transform, font-style, font-weight and text-decoration.




Transform and transitions



Keyframes:
Keyframes are a type of at-rule which are represented by the '@' suffix. At-rules are statements inside CSS that
describe how to behave or perform certain actions. In line with that, keyframes are defined as '@keyframes' in the CSS code.
@keyframes are part of the animation sequence and help in defining the steps inside it.

@keyframes animation-name { 

from { 

property-a: value-a; 

} 

 

to { 

property-a: value-b; 

} 

} 





The 'from' and 'to' keywords are used inside the @keyframes rule to mark the transition of one or more properties
 and can be seen as the start and end points of that transition. As can be seen from the syntax, the values of 
 ‘property-a’ changes from ‘value-a’ to ‘value-b’. To expand on the use of ‘from’ and ‘to’, the @keyframes allows 
 you to add more steps to your animation by using a percentage that represents the completion of the animation.


 @keyframes identifier { 

0% {transform: rotate(100deg);} 

30% {opacity: 1;} 

50% {opacity: 0.50;} 

70% {opacity: 1;} 

100% {transform: rotate(50deg);} 
 }






Preprocessors: sass, scss, Stylus:

CSS preprocesses are special compilers used to create a CSS file that can be referenced by an HTML document. They are 
generally used to reduce the amount of CSS you need to write and allow you to re-use values across multiple rules. This
 will make re-using animations and effects much easier. And because preprocessors are an extension of CSS they'll help
  not just in animation but any CSS code. Let's learn a little more about them.

Preprocessors provide audit functionality on top of the CSS features already present. Some of the features of preprocessors 
include the option to create variables, loops, and if else statements. Different preprocessors each have their own syntax 
and configurations for adding these features. Some of the most commonly used preprocessors include Sass, LESS, Stylus and 
PostCSS. The use of these preprocessors requires the installation of a compiler on top of your web server. 

In the early days of CSS, the main problem developers faced was the difficulty of managing the code. The way CSS was 
designed made the code very long, messy and complex. It also made it difficult to troubleshoot. Preprocessors have their 
own scripting language that adds logical structures, automation properties, reusability and bloating of the code. You’ll
 now explore some of the different preprocessors available.

 SASS and SCSS 
 Syntactically Awesome Style Sheets (SASS) is a scripting language that CSS compiles and interprets into CSS. SCSS,
  which stands for Sassy CSS is the syntax for SASS and can be seen as an advanced version of both SASS and CSS. The
   difference between SASS and SCSS is best explained by the SASS documentation, which states:

"There are two syntaxes available for Sass. The first, known as SCSS (Sassy CSS) and used throughout this reference, 
is an extension of the syntax of CSS. This means that every valid CSS stylesheet is a valid SCSS file with the same meaning.
 Files using this syntax have the .scss extension.









        ** Debugging CSS **

The first step in debugging CSS is to find the root of the issue and isolate the elements involved. 
The majority of CSS issues will be with the layout, such as: 
        - Content Overflow
        - Misplaced elements in relaton to container
        - Browser and device-related inconsistencies resulting in variable viewports


        Isolation by reduced test case  
One way to deal with a problem is to replicate your code and systematically remove any code unrelated to the 
HTML and CSS elements that could be the source of the problem. The code should be distilled down to the least amount of 
code possible, and only then are suitable changes made to get the results you want. Alternatively, you can enable rules
 one at a time to observe their impact on the displayed elements.  

        Items inside containers  
Often, isolation will not work, as the problem is the result of the relative mapping of elements. For example, with the 
misconfigured width of an item inside a flex layout. It’s important to check the use of suitable CSS properties in such cases.
For a given item inside a grid, depending on the use case, width, grid-template-column, margin and padding can all be used
to give spacing to an element. Additionally, you can also set different units that will all have their own behavior.
In most cases, it helps to be familiar with the unit of measurement in relation to the container type to avoid 
misconfigurations.  

        Relocating items  
Similar to the isolation of elements, you can move a certain element to observe its behavior.
 Doing a comparison can often help you to understand the source of the problem.   

The CSS compiler reads the elements from right to left. As an example, for a selector such as
 div .alpha > p, the element read first will be p before moving ‘outside’. When you change the position of the p 
 from inside the .alpha class to some other position inside your code, it is easier to debug the source of the problem.
  This should be done on a case-specific basis.          

        Dev tools  
There are lots of user-friendly tools available today that can help debug CSS. However, the best tool you can use is the 
one provided by the browsers, called the developer tools, or dev tools. You can find these by right-clicking on a web page
 and selecting ‘Inspect Element’. option Note how every browser has its own expression when it comes to the configuration
  options, but fundamentally they are similar. Browsers today are very powerful pieces of software. If you spend time
   exploring the options, you may not need any other additional tools or software for debugging CSS and other front-end 
   languages.     