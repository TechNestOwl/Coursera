        Undeerstanding Flexbox

Much like the div and box container that you can create using HTML, flexbox is a type of container. 
Flexbox can overcome the limitations caused by containers such as block and inline because it does 
a better job of scaling over larger web pages and also provides more dynamic control of the containers. 
This is because it can grow, shrink and align the items inside it which give better control to the programmer
 over the contents and styling of the items inside the container. 

Flexbox is single-dimensional, which means you can align it either along a row or a column and it is set to row 
alignment by default. There are two axes, the main and cross-axis, much like the x and y-axis used in coordinate 
geometry. When aligned along the row, the horizontal axis is called the main axis and the vertical axis is called 
the cross axis. For the items present inside the flexbox container, the placement starts from the top-left corner
 moving along the main or horizontal axis. When the row is filled, the items continue to the next row. Note that 
 with the help of a property called flex-direction, you can instead flip the main axis to run vertically and the
  cross axis will then be horizontal. In such a case, the items will start from top left and move down along the 
  vertical main axis. The properties you choose will help better control alignment, spacing, direction and eventually
   styling of the container and items present inside it. 




        Alignment Properties

justify-content. For item alignment on main axis.

align-items. For item alignment on cross axis.

align-self. For unique flex items on cross axis.

align-content. Used for packing flex lines and control over space.


    ** flex-direction: 
This property is used to set the main axis, which is a ‘row’ by default.
 It basically means you are changing your ‘main’ axis from horizontal rows to vertical columns. 



        Other CSS selectors

- Attribute selectors
        target specific attributs in the dom. 
        ex1: a[href="https://google.com]   -> will target all a tags with this this specific attribute
        ex2: a["href$=.org"]    -> all elements with href ending in '.org'

- :nth-of-type()|| :nyth-of-child() selectors
        matches elements based on position among siblings and type(tag name)


- Star selectoreet 
        * selects 'all' elements

- Group selectors / slector stacking
        precisely as described... groups selectors together




        Specificity Hierarchy

CSS has a set of rules that it uses to 'score' or assign a certain weight to selectors ad this creates a Specificity
hiearchy. based on the wights, there are four categories in this Hierarchy. 

- inline styles: 
        highest Specificity, inlye styles <style></styles> will be applied irrespective of other rules.

- IDs
        next in the hiearchy, id's are represented by # 

- Classes, attributes, and psedo-Classes
        next in the hiearchy. 
        ex:     .my-class 
                p['attribute']
                div:hover

- elemenmts and pseudo-elements
        lowest position in Hierarchy. 



        Pseudo-classes 

State based selectors. Meaning they allow you to select elements based on their state. Ex: hoverState.

Syntax: 
        selector::pseudo-class{
                property: value;
        }

        .myButton::active {
                background-color: green;
                transform: scale(1.2);
        }

User Action States: 
        :hover
        :active
        :focus
These pseudo classes have an effect while the user is actively engaging with an element. 

Form States:
        : diabled and : enabled
        : checked and : indeterminate
        : valid and : invalid

Specific position-based states:
        : first-of-type
        : last-of-type
        : nth-of-type
        : nth-last-of-type

Note: when using multiple pseudo classes, the order in which you apply pseudo classes determins the applied style. Follow the order of 'LVHA'
LVHA:
        -link
        -visited
        -hover
        -active



Text Effects:

The effects developers use on text items on a web page are chosen
mainly because of their styling and layout style. Interesting effects
 can be created by combining these with other CSS properties. 

The visual representation of text content can be changed by four main 
properties: text-transform, font-style, font-weight and text-decoration.




Transform and transitions



Keyframes:
Keyframes are a type of at-rule which are represented by the '@' suffix. At-rules are statements inside CSS that
describe how to behave or perform certain actions. In line with that, keyframes are defined as '@keyframes' in the CSS code.
@keyframes are part of the animation sequence and help in defining the steps inside it.

@keyframes animation-name { 

from { 

property-a: value-a; 

} 

 

to { 

property-a: value-b; 

} 

} 





The 'from' and 'to' keywords are used inside the @keyframes rule to mark the transition of one or more properties
 and can be seen as the start and end points of that transition. As can be seen from the syntax, the values of 
 ‘property-a’ changes from ‘value-a’ to ‘value-b’. To expand on the use of ‘from’ and ‘to’, the @keyframes allows 
 you to add more steps to your animation by using a percentage that represents the completion of the animation.


 @keyframes identifier { 

0% {transform: rotate(100deg);} 

30% {opacity: 1;} 

50% {opacity: 0.50;} 

70% {opacity: 1;} 

100% {transform: rotate(50deg);} 
 }